---
import champions from '../data/champions.json';
const championsData = champions;
---
<div class="randomizer-container">
    <div class="randomizer-grid">
        <div class="positions-container">
            <div class="position-box" data-position="top">
                <div class="champion-slot">
                    <div class="champion-image"></div>
                </div>
            </div>

            <div class="position-box" data-position="jungle">
                <div class="champion-slot">
                    <div class="champion-image"></div>
                </div>
            </div>

            <div class="position-box" data-position="mid">
                <div class="champion-slot">
                    <div class="champion-image"></div>
                </div>
            </div>

            <div class="position-box" data-position="adc">
                <div class="champion-slot">
                    <div class="champion-image"></div>
                </div>
            </div>

            <div class="position-box" data-position="support">
                <div class="champion-slot">
                    <div class="champion-image"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .randomizer-container {
        width: 100%;
        color: white;
        display: flex;
        height: 25%;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .randomizer-grid {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .positions-container {
        width: 100%;
        display: flex;
        justify-content: center;
        gap: 100px;
        align-items: center;
        padding: 0;
    }

    .position-box {
        width: 100px;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .champion-slot {
        width: 100px;
        height: 100px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
        background: #343434;
        border: 5px solid #1D1D1D;
        border-radius: 10px;
        position: relative;
        transition: all 0.2s ease;
    }

    .champion-slot::before {
        content: "";
        position: absolute;
        width: 45px;  /* Aumentado el tamaño */
        height: 45px; /* Aumentado el tamaño */
        z-index: 0;
        opacity: 0.15; /* Reducida la opacidad */
        background-repeat: no-repeat;
        background-position: center;
        background-size: contain;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .position-box[data-position="top"] .champion-slot::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 24 24'%3E%3Cg fill='%23FFFFFF' fill-rule='nonzero'%3E%3Cpath d='m19 3-4 4H7v8l-4 4V3z'%3E%3C/path%3E%3Cpath d='m5 21 4-4h8V9l4-4v16z' opacity='0.2'%3E%3C/path%3E%3Cpath d='M10 10h4v4h-4z' opacity='0.2'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-box[data-position="jungle"] .champion-slot::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 24 24'%3E%3Cpath fill='%23FFFFFF' fill-rule='nonzero' d='M5.14 2c1.58 1.21 5.58 5.023 6.976 9.953s0 10.047 0 10.047c-2.749-3.164-5.893-5.2-6.18-5.382l-.02-.013C5.45 13.814 3 8.79 3 8.79c3.536.867 4.93 4.279 4.93 4.279C7.558 8.698 5.14 2 5.14 2m14.976 5.907s-1.243 2.471-1.814 4.604c-.235.878-.285 2.2-.29 3.058v.282c.003.347.01.568.01.568s-1.738 2.397-3.38 3.678a27.5 27.5 0 0 0-.208-5.334c.928-2.023 2.846-5.454 5.682-6.856m-2.124-5.331s-2.325 3.052-2.836 6.029c-.11.636-.201 1.194-.284 1.695-.379.584-.73 1.166-1.05 1.733-.033-.125-.06-.25-.095-.375a21 21 0 0 0-1.16-3.08c.053-.146.103-.29.17-.438 0 0 1.814-3.78 5.255-5.564'%3E%3C/path%3E%3C/svg%3E");
    }

    .position-box[data-position="mid"] .champion-slot::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 24 24'%3E%3Cg fill='%23FFFFFF' fill-rule='nonzero'%3E%3Cpath d='m15 3-4 4H7v4l-4 4V3zM9 21l4-4h4v-4l4-4v12z' opacity='0.2'%3E%3C/path%3E%3Cpath d='M18 3h3v3L6 21H3v-3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-box[data-position="adc"] .champion-slot::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 24 24'%3E%3Cg fill='%23FFFFFF' fill-rule='nonzero'%3E%3Cpath d='m19 3-4 4H7v8l-4 4V3z' opacity='0.2'%3E%3C/path%3E%3Cpath d='m5 21 4-4h8V9l4-4v16z'%3E%3C/path%3E%3Cpath d='M10 10h4v4h-4z' opacity='0.2'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-box[data-position="support"] .champion-slot::before {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' viewBox='0 0 24 24'%3E%3Cpath fill='%23FFFFFF' fill-rule='nonzero' d='M12.833 10.833 14.5 17.53v.804L12.833 20h-1.666L9.5 18.333v-.804l1.667-6.696zM7 7.5 9.5 10l-1.667 4.167-2.5-2.5L6.167 10h-2.5L2 7.5zm15 0L20.333 10h-2.5l.834 1.667-2.5 2.5L14.5 10 17 7.5zM13.743 5l.757.833v.834l-1.667 2.5h-1.666L9.5 6.667v-.834L10.257 5z'%3E%3C/path%3E%3C/svg%3E");
    }

    .champion-image[style*="background-image"] + .champion-slot,
    .champion-slot:has(.champion-image[style*="background-image"]) {
        cursor: pointer;
    }

    .champion-image[style*="background-image"] + .champion-slot:hover,
    .champion-slot:has(.champion-image[style*="background-image"]):hover {
        background: #051B1E;;
    }

    .champion-image {
        width: 100%;
        height: 100%;
        background-size: cover;
        background-position: center;
        border-radius: 8px;
        position: relative;
        z-index: 1;
        transition: all 0.2s ease;
    }

    .champion-image[style*="background-image"] {
        cursor: pointer;
    }

    .champion-image[style*="background-image"]:hover {
        border-color: transparent;
        box-shadow: none;
    }
    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
    @media only screen and (min-width: 1920px) {
        .champion-slot {
            width: 150px;
            height: 150px;
        }
    }
</style>

<script define:vars={{ championsData }}>    
    const champions = championsData;
    
    function getChampionsByPosition(position) {
        return champions.filter(champion => champion.positions.includes(position));
    }

    function getRandomChampion(position) {
        const positionChampions = getChampionsByPosition(position);
        return positionChampions[Math.floor(Math.random() * positionChampions.length)];
    }

    function animateChampionSelection(slot, champion) {
        const button = slot.parentElement.querySelector('.reroll-btn');
        button.classList.add('active');
        
        const duration = 2000;
        const fps = 30;
        const frames = duration / (1000 / fps);
        let frame = 0;

        const animate = () => {
            if (frame < frames) {
                const randomChamp = champions[Math.floor(Math.random() * champions.length)];
                const championImage = slot.querySelector('.champion-image');
                championImage.style.backgroundImage = `url(${randomChamp.image_url})`;
                frame++;
                setTimeout(animate, 1000 / fps * (frame / frames));
            } else {
                const championImage = slot.querySelector('.champion-image');
                championImage.style.backgroundImage = `url(${champion.image_url})`;
                championImage.onclick = () => {
                    sessionStorage.setItem("championSelected", champion.name);
                    window.location.href = "/vistaChampion";
                };
                button.classList.remove('active');
            }
        };

        animate();
    }

    document.querySelectorAll('.reroll-btn').forEach(button => {
        button.addEventListener('click', () => {
            const box = button.closest('.position-box');
            const position = box.dataset.position;
            const champion = getRandomChampion(position);
            animateChampionSelection(box.querySelector('.champion-slot'), champion);
        });
    });

    document.querySelector('.random-all-btn').addEventListener('click', () => {
        document.querySelectorAll('.position-box').forEach(box => {
            const position = box.dataset.position;
            const champion = getRandomChampion(position);
            animateChampionSelection(box.querySelector('.champion-slot'), champion);
        });
    });
</script>