---
import personajesData from '../data/champions.json';
import duosData from '../data/Duos.json';
import wombosData from '../data/Wombos.json';
import composData from '../data/Compos.json';
import TierListLogo from '../assets/tierlist_logo.svg?raw';

// Asegurarse de que los datos existan
const safePersonajesData = Array.isArray(personajesData) ? personajesData : [];
const safeDuosData = Array.isArray(duosData) ? duosData : [];
const safeWombosData = Array.isArray(wombosData) ? wombosData : [];

const positions = ['all', 'top', 'jungle', 'mid', 'adc', 'support'];

const DEFAULT_RATES = {
    winRate: 50.0,
    pickRate: 5.0,
    banRate: 3.0
};

// Función para obtener la URL de la imagen del campeón
function getChampionImageUrl(championName) {
    const champion = safePersonajesData.find(c => c.name.toLowerCase() === championName.toLowerCase());
    return champion?.image_url || '';
}

// Función para convertir tier a número para ordenamiento
function getTierValue(tier) {
    const tiers = {
        'S+': 7,
        'S': 6,
        'A': 5,
        'B': 4,
        'C': 3,
        'D': 2
    };
    return tiers[tier] || 0;
}

// Ordenar campeones por tier
const championsWithStatsSorted = [...safePersonajesData]
    .sort((a, b) => {
        const tierDiff = getTierValue(b.tier) - getTierValue(a.tier);
        if (tierDiff !== 0) return tierDiff;
        return a.name.localeCompare(b.name);
    });

// Definir el orden de los tiers
const tiersInOrder = ['S+', 'S', 'A', 'B', 'C', 'D'];

// Agrupar campeones por tier
const tierGroups = championsWithStatsSorted.reduce((groups, champion) => {
    const tier = champion.tier;
    if (!groups[tier]) {
        groups[tier] = [];
    }
    groups[tier].push(champion);
    return groups;
}, {});

const tierGroupsOrdered = {};
tiersInOrder.forEach(tier => {
    if (tierGroups[tier]) {
        tierGroupsOrdered[tier] = tierGroups[tier];
    }
});

// Ordenar y agrupar duos
const duosGrouped = safeDuosData.reduce((groups, duoData) => {
    const tier = duoData.tier;
    if (!groups[tier]) {
        groups[tier] = [];
    }
    groups[tier].push({
        ...duoData,
        champion1: {
            name: duoData.duo.champion1.name,
            image_url: duoData.duo.champion1.image_url
        },
        champion2: {
            name: duoData.duo.champion2.name,
            image_url: duoData.duo.champion2.image_url
        },
        positions: duoData.positions || [],
        winrate: duoData.winrate || DEFAULT_RATES.winRate
    });
    return groups;
}, {});

const duosGroupedOrdered = {};
tiersInOrder.forEach(tier => {
    if (duosGrouped[tier]) {
        duosGroupedOrdered[tier] = duosGrouped[tier];
    }
});

// Ordenar y agrupar wombos
const wombosGrouped = safeWombosData.reduce((groups, womboData) => {
    const tier = womboData.tier;
    if (!groups[tier]) {
        groups[tier] = [];
    }
    groups[tier].push({
        ...womboData,
        champions: [
            {
                name: womboData.wombo.champion1.name,
                image_url: womboData.wombo.champion1.image_url
            },
            {
                name: womboData.wombo.champion2.name,
                image_url: womboData.wombo.champion2.image_url
            }
        ],
        positions: womboData.positions || [],
        winrate: womboData.winrate || DEFAULT_RATES.winRate
    });
    return groups;
}, {});

const wombosGroupedOrdered = {};
tiersInOrder.forEach(tier => {
    if (wombosGrouped[tier]) {
        wombosGroupedOrdered[tier] = wombosGrouped[tier];
    }
});

// Ordenar y agrupar composiciones
const composGrouped = Array.isArray(composData) ? composData.reduce((groups, compoData) => {
    if (!groups['all']) {
        groups['all'] = [];
    }

    groups['all'].push({
        ...compoData,
        champions: compoData.champions.map(champion => ({
            name: champion.name,
            image_url: champion.image_url,
            position: champion.position
        }))
    });
    return groups;
}, {}) : {};

const composGroupedOrdered = {
    'all': composGrouped['all'] || []
};

// Variable para el tipo de vista inicial
const viewType = 'single';
---

<div class="tierlist-container">
    <div class="logo-container">
        <Fragment set:html={TierListLogo} />
    </div>

    <div class="content-wrapper">
        <!-- Navegación superior -->
        <nav class="tier-nav">
            <button class="tier-nav-item active" data-view="single">Clasificatoria Solo</button>
            <button class="tier-nav-item" data-view="duos">Duos</button>
            <button class="tier-nav-item" data-view="wombos">Wombos</button>
            <button class="tier-nav-item" data-view="compos">Composiciones</button>
        </nav>

        <!-- Vista de campeones individuales -->
        <div id="single-view" class="view-content active">
            <div class="search-and-filters">
                <div class="search-container">
                    <input 
                        type="text" 
                        id="champion-search" 
                        placeholder="Buscar campeones"
                        autocomplete="off"
                    >
                </div>
                <div id="position-tabs" class="position-tabs">
                    {positions.map(position => (
                        <button 
                            class:list={['tab-btn', { active: position === 'all' }]} 
                            data-position={position}
                            title={position.toUpperCase()}
                        >
                            {position === 'all' ? (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <path fill="currentColor" d="M16.293 17.03c.362.628.147 1.43-.48 1.793-.629.364-1.431.149-1.794-.479l-2.144-3.717-2.144 3.717c-.363.628-1.165.843-1.793.48-.628-.363-.843-1.166-.48-1.793l2.144-3.718h-4.29c-.724 0-1.312-.587-1.312-1.312 0-.727.588-1.314 1.313-1.314h4.289L7.457 6.969c-.362-.627-.147-1.43.48-1.792.629-.364 1.431-.149 1.794.479l2.144 3.717 2.144-3.717c.363-.628 1.165-.843 1.793-.48.628.363.843 1.166.48 1.793l-2.144 3.718h4.29c.725 0 1.312.587 1.312 1.312 0 .727-.587 1.314-1.312 1.314h-4.29l2.145 3.718z"/>
                                </svg>
                            ) : position === 'top' ? (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <g fill="currentColor" fill-rule="nonzero">
                                        <path d="m19 3-4 4H7v8l-4 4V3z"></path>
                                        <path d="m5 21 4-4h8V9l4-4v16z" opacity="0.2"></path>
                                        <path d="M10 10h4v4h-4z" opacity="0.2"></path>
                                    </g>
                                </svg>
                            ) : position === 'jungle' ? (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <path fill="currentColor" fill-rule="nonzero" d="M5.14 2c1.58 1.21 5.58 5.023 6.976 9.953s0 10.047 0 10.047c-2.749-3.164-5.893-5.2-6.18-5.382l-.02-.013C5.45 13.814 3 8.79 3 8.79c3.536.867 4.93 4.279 4.93 4.279C7.558 8.698 5.14 2 5.14 2m14.976 5.907s-1.243 2.471-1.814 4.604c-.235.878-.285 2.2-.29 3.058v.282c.003.347.01.568.01.568s-1.738 2.397-3.38 3.678a27.5 27.5 0 0 0-.208-5.334c.928-2.023 2.846-5.454 5.682-6.856m-2.124-5.331s-2.325 3.052-2.836 6.029c-.11.636-.201 1.194-.284 1.695-.379.584-.73 1.166-1.05 1.733-.033-.125-.06-.25-.095-.375a21 21 0 0 0-1.16-3.08c.053-.146.103-.29.17-.438 0 0 1.814-3.78 5.255-5.564"></path>
                                </svg>
                            ) : position === 'mid' ? (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <g fill="currentColor" fill-rule="nonzero">
                                        <path d="m15 3-4 4H7v4l-4 4V3zM9 21l4-4h4v-4l4-4v12z" opacity="0.2"></path>
                                        <path d="M18 3h3v3L6 21H3v-3z"></path>
                                    </g>
                                </svg>
                            ) : position === 'adc' ? (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <g fill="currentColor" fill-rule="nonzero">
                                        <path d="m19 3-4 4H7v8l-4 4V3z" opacity="0.2"></path>
                                        <path d="m5 21 4-4h8V9l4-4v16z"></path>
                                        <path d="M10 10h4v4h-4z" opacity="0.2"></path>
                                    </g>
                                </svg>
                            ) : (
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                    <path fill="currentColor" fill-rule="nonzero" d="M12.833 10.833 14.5 17.53v.804L12.833 20h-1.666L9.5 18.333v-.804l1.667-6.696zM7 7.5 9.5 10l-1.667 4.167-2.5-2.5L6.167 10h-2.5L2 7.5zm15 0L20.333 10h-2.5l.834 1.667-2.5 2.5L14.5 10 17 7.5zM13.743 5l.757.833v.834l-1.667 2.5h-1.666L9.5 6.667v-.834L10.257 5z"></path>
                                </svg>
                            )}
                        </button>
                    ))}
                </div>
            </div>

            <div class="champions-list">
                {Object.entries(tierGroupsOrdered).map(([tier, champions]) => (
                    <div class={`tier-section tier-${tier.toLowerCase().replace('+', '-plus')}`}>
                        <div class="tier-header">
                            <div class="tier-label">{tier}</div>
                        </div>
                        <div class="champions-grid">
                            {champions.map((champion) => (
                                <div class="champion-item" data-positions={JSON.stringify(champion.positions)}>
                                    <div class="champion-icon">
                                        <img src={getChampionImageUrl(champion.name)} alt={champion.name} />
                                    </div>
                                    <div class="champion-info">
                                        <div class="champion-name">{champion.name}</div>
                                        <div class="champion-positions">
                                            {champion.positions.map((pos) => (
                                                <span class={`position-icon ${pos}`}></span>
                                            ))}
                                        </div>
                                    </div>
                                    <div class="champion-stats">
                                        <div class="stat winrate">{champion.winrate || DEFAULT_RATES.winRate}%</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>

        <!-- Vista de duos -->
        <div id="duos-view" class="view-content">
            <div class="search-and-filters">
                <div class="search-container">
                    <input 
                        type="text" 
                        id="duo-search" 
                        placeholder="Buscar duos"
                        autocomplete="off"
                    >
                </div>
                <div id="duo-position-tabs" class="position-tabs">
                    <button class="tab-btn active" data-duo-position="all" title="Todos">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M16.293 17.03c.362.628.147 1.43-.48 1.793-.629.364-1.431.149-1.794-.479l-2.144-3.717-2.144 3.717c-.363.628-1.165.843-1.793.48-.628-.363-.843-1.166-.48-1.793l2.144-3.718h-4.29c-.724 0-1.312-.587-1.312-1.312 0-.727.588-1.314 1.313-1.314h4.289L7.457 6.969c-.362-.627-.147-1.43.48-1.792.629-.364 1.431-.149 1.794.479l2.144 3.717 2.144-3.717c.363-.628 1.165-.843 1.793-.48.628.363.843 1.166.48 1.793l-2.144 3.718h4.29c.725 0 1.312.587 1.312 1.312 0 .727-.587 1.314-1.312 1.314h-4.29l2.145 3.718z"/>
                        </svg>
                    </button>
                    <button class="tab-btn" data-duo-position="adc-support" title="ADC + SUPPORT">
                        <div class="duo-icons">
                            <span class="position-icon adc"></span>
                            <span class="position-icon support"></span>
                        </div>
                    </button>
                    <button class="tab-btn" data-duo-position="mid-jungle" title="MID + JUNGLE">
                        <div class="duo-icons">
                            <span class="position-icon mid"></span>
                            <span class="position-icon jungle"></span>
                        </div>
                    </button>
                    <button class="tab-btn" data-duo-position="top-jungle" title="TOP + JUNGLE">
                        <div class="duo-icons">
                            <span class="position-icon top"></span>
                            <span class="position-icon jungle"></span>
                        </div>
                    </button>
                </div>
            </div>

            <div class="champions-list">
                {Object.entries(duosGroupedOrdered || {}).map(([tier, duos = []]) => (
                    <div class={`tier-section tier-${tier.toLowerCase().replace('+', '-plus')}`}>
                        <div class="tier-header">
                            <div class="tier-label">{tier}</div>
                        </div>
                        <div class="champions-grid">
                            {(duos || []).map((duo) => (
                                <div class="duo-item">
                                    <div class="duo-champions">
                                        <div class="champion-icon">
                                            <img src={duo.champion1.image_url} alt={duo.champion1.name} />
                                        </div>
                                        <div class="champion-icon">
                                            <img src={duo.champion2.image_url} alt={duo.champion2.name} />
                                        </div>
                                    </div>
                                    <div class="duo-info">
                                        <div class="duo-names">{duo.champion1.name} + {duo.champion2.name}</div>
                                        <div class="duo-positions">
                                            {(duo.positions || []).map((pos) => (
                                                <span class={`position-icon ${pos}`}></span>
                                            ))}
                                        </div>
                                    </div>
                                    <div class="duo-stats">
                                        <div class="stat winrate">{duo.winrate || DEFAULT_RATES.winRate}%</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>

        <!-- Vista de wombos -->
        <div id="wombos-view" class="view-content">
            <div class="search-and-filters">
                <div class="search-container">
                    <input 
                        type="text" 
                        id="wombo-search" 
                        placeholder="Buscar wombos"
                        autocomplete="off"
                    >
                </div>
            </div>

            <div class="champions-list">
                {Object.entries(wombosGroupedOrdered || {}).map(([tier, wombos = []]) => (
                    <div class={`tier-section tier-${tier.toLowerCase().replace('+', '-plus')}`}>
                        <div class="tier-header">
                            <div class="tier-label">{tier}</div>
                        </div>
                        <div class="champions-grid">
                            {(wombos || []).map((wombo) => (
                                <div class="wombo-item">
                                    <div class="wombo-champions">
                                        {(wombo.champions || []).map((champion) => (
                                            <div class="champion-icon">
                                                <img src={champion.image_url} alt={champion.name} />
                                            </div>
                                        ))}
                                    </div>
                                    <div class="wombo-info">
                                        <div class="wombo-names">
                                            {(wombo.champions || []).map(c => c.name).join(' + ')}
                                        </div>
                                        <div class="wombo-description">{wombo.positionCombo}</div>
                                    </div>
                                    <div class="wombo-stats">
                                        <div class="stat winrate">{wombo.winrate || DEFAULT_RATES.winRate}%</div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                ))}
            </div>
        </div>

        <!-- Vista de composiciones -->
        <div id="compos-view" class="view-content">
            <div class="search-and-filters">
                <div class="search-container">
                    <input 
                        type="text" 
                        id="compo-search" 
                        placeholder="Buscar composiciones"
                        autocomplete="off"
                    >
                </div>
            </div>

            <div class="champions-list">
                <div class="champions-grid">
                    {composGroupedOrdered['all'].map((compo) => (
                        <div class="compo-item">
                            <div class="compo-champions">
                                {(compo.champions || []).map((champion) => (
                                    <div class="champion-icon-wrapper">
                                        <div class="champion-icon">
                                            <img src={champion.image_url} alt={champion.name} />
                                        </div>
                                        <span class={`position-icon ${champion.position}`}></span>
                                    </div>
                                ))}
                            </div>
                            <div class="compo-info">
                                <div class="compo-names">
                                    {(compo.champions || []).map(c => c.name).join(' + ')}
                                </div>
                                <div class="compo-description">{compo.description || 'Composición de equipo'}</div>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .tierlist-container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .content-wrapper {
        background: #1C2025;
        border-radius: 1rem;
        padding: 1.5rem;
    }

    .tier-nav {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 1.5rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding-bottom: 1rem;
    }

    .tier-nav-item {
        padding: 0.5rem 1rem;
        color: #9aa4af;
        text-decoration: none;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
    }

    .tier-nav-item:hover {
        color: white;
        background: rgba(255, 255, 255, 0.1);
    }

    .tier-nav-item.active {
        color: white;
        background: #f54245;
    }

    .search-and-filters {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        gap: 1rem;
    }

    .search-container {
        flex: 1;
        max-width: 300px;
    }

    .search-container input {
        width: 100%;
        height: 40px;
        background: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 0.5rem;
        padding: 0 1rem;
        color: white;
        font-size: 0.9rem;
    }

    .position-tabs {
        display: flex;
        gap: 0.5rem;
    }

    .tab-btn {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.05);
        border: none;
        border-radius: 0.5rem;
        color: #9aa4af;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .tab-btn:hover,
    .tab-btn.active {
        background: #f54245;
        color: white;
    }

    .champions-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .tier-section {
        background: rgba(28, 32, 37, 0.5);
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .tier-header {
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
    }

    .tier-label {
        font-size: 1.25rem;
        font-weight: bold;
        padding: 0.25rem 1rem;
        border-radius: 0.25rem;
    }

    .champions-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 0.75rem;
        padding: 0.75rem;
    }

    .champion-item {
        display: flex;
        align-items: center;
        padding: 0.5rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 0.5rem;
        gap: 0.75rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .champion-item:hover {
        background: rgba(255, 255, 255, 0.08);
        transform: translateY(-2px);
    }

    .champion-icon {
        width: 40px;
        height: 40px;
        border-radius: 0.25rem;
        overflow: hidden;
    }

    .champion-icon img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .champion-info {
        flex: 1;
    }

    .champion-name {
        font-weight: 500;
        color: white;
    }

    .champion-positions {
        display: flex;
        gap: 0.25rem;
        margin-top: 0.25rem;
    }

    .champion-stats {
        text-align: right;
        min-width: 3rem;
    }

    .winrate {
        color: #9aa4af;
        font-size: 0.875rem;
    }

    /* Colores de tier */
    .tier-s-plus .tier-label {
        color: #ffdd75;
        background: rgba(255, 221, 117, 0.1);
    }

    .tier-s .tier-label {
        color: #bd9af2;
        background: rgba(189, 154, 242, 0.1);
    }

    .tier-a .tier-label {
        color: #beecfa;
        background: rgba(190, 236, 250, 0.1);
    }

    .tier-b .tier-label {
        color: #9ad47f;
        background: rgba(154, 212, 127, 0.1);
    }

    .tier-c .tier-label {
        color: #f59551;
        background: rgba(245, 149, 81, 0.1);
    }

    .tier-d .tier-label {
        color: #686b6e;
        background: rgba(104, 107, 110, 0.1);
    }

    @media (max-width: 1200px) {
        .champions-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    @media (max-width: 768px) {
        .champions-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    .view-content {
        display: none;
    }

    .view-content.active {
        display: block;
    }

    /* Estilos para duos */
    .duo-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 0.5rem;
        gap: 1rem;
    }

    .duo-champions {
        display: flex;
        gap: 0.5rem;
    }

    .duo-names {
        font-weight: 500;
        color: white;
        font-size: 0.9rem;
    }

    .duo-positions {
        display: flex;
        gap: 0.25rem;
        margin-top: 0.25rem;
    }

    /* Estilos para wombos */
    .wombo-item {
        display: flex;
        align-items: center;
        padding: 0.75rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 0.5rem;
        gap: 1rem;
    }

    .wombo-champions {
        display: flex;
        gap: 0.5rem;
    }

    .wombo-names {
        font-weight: 500;
        color: white;
        font-size: 0.9rem;
    }

    .wombo-description {
        color: #9aa4af;
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .position-icon {
        width: 16px;
        height: 16px;
        background-size: contain;
        background-repeat: no-repeat;
        display: inline-block;
    }

    .position-icon.top {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg fill='%239aa4af' fill-rule='nonzero'%3E%3Cpath d='m19 3-4 4H7v8l-4 4V3z'%3E%3C/path%3E%3Cpath d='m5 21 4-4h8V9l4-4v16z' opacity='0.2'%3E%3C/path%3E%3Cpath d='M10 10h4v4h-4z' opacity='0.2'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-icon.jungle {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='%239aa4af' fill-rule='nonzero' d='M5.14 2c1.58 1.21 5.58 5.023 6.976 9.953s0 10.047 0 10.047c-2.749-3.164-5.893-5.2-6.18-5.382l-.02-.013C5.45 13.814 3 8.79 3 8.79c3.536.867 4.93 4.279 4.93 4.279C7.558 8.698 5.14 2 5.14 2'%3E%3C/path%3E%3C/svg%3E");
    }

    .position-icon.mid {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg fill='%239aa4af' fill-rule='nonzero'%3E%3Cpath d='m15 3-4 4H7v4l-4 4V3zM9 21l4-4h4v-4l4-4v12z' opacity='0.2'%3E%3C/path%3E%3Cpath d='M18 3h3v3L6 21H3v-3z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-icon.adc {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cg fill='%239aa4af' fill-rule='nonzero'%3E%3Cpath d='m19 3-4 4H7v8l-4 4V3z' opacity='0.2'%3E%3C/path%3E%3Cpath d='m5 21 4-4h8V9l4-4v16z'%3E%3C/path%3E%3Cpath d='M10 10h4v4h-4z' opacity='0.2'%3E%3C/path%3E%3C/g%3E%3C/svg%3E");
    }

    .position-icon.support {
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='%239aa4af' fill-rule='nonzero' d='M12.833 10.833 14.5 17.53v.804L12.833 20h-1.666L9.5 18.333v-.804l1.667-6.696zM7 7.5 9.5 10l-1.667 4.167-2.5-2.5L6.167 10h-2.5L2 7.5zm15 0L20.333 10h-2.5l.834 1.667-2.5 2.5L14.5 10 17 7.5zM13.743 5l.757.833v.834l-1.667 2.5h-1.666L9.5 6.667v-.834L10.257 5z'%3E%3C/path%3E%3C/svg%3E");
    }

    /* Estilos para composiciones */
    .compo-item {
        display: flex;
        flex-direction: column;
        padding: 1.25rem;
        background: rgba(255, 255, 255, 0.03);
        border-radius: 0.75rem;
        gap: 1rem;
        min-height: 200px;
    }

    .compo-champions {
        display: flex;
        gap: 0.75rem;
        justify-content: center;
        align-items: center;
    }

    .champion-icon-wrapper {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
    }

    .compo-item .champion-icon {
        width: 48px;
        height: 48px;
        border-radius: 0.5rem;
        overflow: hidden;
    }

    .compo-names {
        font-weight: 500;
        color: white;
        font-size: 0.9rem;
        text-align: center;
        line-height: 1.2;
    }

    .compo-description {
        color: #9aa4af;
        font-size: 0.85rem;
        margin-top: 0.25rem;
        text-align: center;
        line-height: 1.2;
    }

    #compos-view .champions-grid {
        grid-template-columns: repeat(3, 1fr);
        gap: 1rem;
        padding: 1rem;
    }

    @media (max-width: 1200px) {
        #compos-view .champions-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @media (max-width: 768px) {
        #compos-view .champions-grid {
            grid-template-columns: repeat(1, 1fr);
        }
    }

    .duo-icons {
        display: flex;
        gap: 4px;
        align-items: center;
    }

    #duo-position-tabs .tab-btn {
        width: auto;
        padding: 0.25rem 0.5rem;
    }
</style>

<script>
    function initializeElements() {
        console.log('Inicializando elementos de TierList...');
        
        // Solo inicializar los event listeners si estamos en la página de tierlist
        if (window.location.pathname.includes('tierlist')) {
            // Event listeners para la navegación
            document.querySelectorAll('.tier-nav-item').forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    const viewType = item.dataset.view;
                    switchView(viewType);
                });
            });

            // Event listeners para los filtros de posición
            document.querySelectorAll('#position-tabs .tab-btn').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault();
                    document.querySelectorAll('#position-tabs .tab-btn').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    filterChampions();
                });
            });

            // Event listeners para la búsqueda
            const championSearch = document.getElementById('champion-search');
            const duoSearch = document.getElementById('duo-search');
            const womboSearch = document.getElementById('wombo-search');
            const compoSearch = document.getElementById('compo-search');

            championSearch?.addEventListener('input', filterChampions);
            duoSearch?.addEventListener('input', filterDuos);
            womboSearch?.addEventListener('input', filterWombos);
            compoSearch?.addEventListener('input', filterCompos);

            // Event listeners para los filtros de posición de dúos
            document.querySelectorAll('#duo-position-tabs .tab-btn').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    e.preventDefault();
                    document.querySelectorAll('#duo-position-tabs .tab-btn').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    filterDuos();
                });
            });

            // Establecer la vista inicial
            switchView('single');
        }
    }

    function filterChampions() {
        const searchTerm = document.getElementById('champion-search')?.value.toLowerCase() || '';
        const activePosition = document.querySelector('#position-tabs .tab-btn.active')?.dataset.position || 'all';

        document.querySelectorAll('#single-view .tier-section').forEach(section => {
            const championsInTier = section.querySelectorAll('.champion-item');
            let hasVisibleChampions = false;

            championsInTier.forEach(champion => {
                const championName = champion.querySelector('.champion-name')?.textContent.toLowerCase() || '';
                const positions = JSON.parse(champion.dataset.positions || '[]');
                
                const shouldShow = championName.includes(searchTerm) && 
                                 (activePosition === 'all' || positions.includes(activePosition));
                
                champion.style.display = shouldShow ? 'flex' : 'none';
                if (shouldShow) hasVisibleChampions = true;
            });

            section.style.display = hasVisibleChampions ? 'block' : 'none';
        });
    }

    function filterDuos() {
        const searchTerm = document.getElementById('duo-search')?.value.toLowerCase() || '';
        const activeDuoPosition = document.querySelector('#duo-position-tabs .tab-btn.active')?.dataset.duoPosition || 'all';

        document.querySelectorAll('#duos-view .tier-section').forEach(section => {
            const duosInTier = section.querySelectorAll('.duo-item');
            let hasVisibleDuos = false;

            duosInTier.forEach(duo => {
                const duoNames = duo.querySelector('.duo-names')?.textContent.toLowerCase() || '';
                const positions = Array.from(duo.querySelectorAll('.duo-positions .position-icon')).map(icon => {
                    const classes = Array.from(icon.classList);
                    return classes.find(c => c !== 'position-icon') || '';
                });
                
                let shouldShow = duoNames.includes(searchTerm);

                if (activeDuoPosition !== 'all') {
                    if (activeDuoPosition === 'adc-support') {
                        shouldShow = shouldShow && positions.includes('adc') && positions.includes('support');
                    } else if (activeDuoPosition === 'mid-jungle') {
                        shouldShow = shouldShow && positions.includes('mid') && positions.includes('jungle');
                    } else if (activeDuoPosition === 'top-jungle') {
                        shouldShow = shouldShow && positions.includes('top') && positions.includes('jungle');
                    }
                }

                duo.style.display = shouldShow ? 'flex' : 'none';
                if (shouldShow) hasVisibleDuos = true;
            });

            section.style.display = hasVisibleDuos ? 'block' : 'none';
        });
    }

    function filterWombos() {
        const searchTerm = document.getElementById('wombo-search')?.value.toLowerCase() || '';

        document.querySelectorAll('#wombos-view .tier-section').forEach(section => {
            const wombosInTier = section.querySelectorAll('.wombo-item');
            let hasVisibleWombos = false;

            wombosInTier.forEach(wombo => {
                const womboNames = wombo.querySelector('.wombo-names')?.textContent.toLowerCase() || '';
                const shouldShow = womboNames.includes(searchTerm);
                
                wombo.style.display = shouldShow ? 'flex' : 'none';
                if (shouldShow) hasVisibleWombos = true;
            });

            section.style.display = hasVisibleWombos ? 'block' : 'none';
        });
    }

    function filterCompos() {
        const searchTerm = document.getElementById('compo-search')?.value.toLowerCase() || '';

        document.querySelectorAll('#compos-view .compo-item').forEach(compo => {
            const compoNames = compo.querySelector('.compo-names')?.textContent.toLowerCase() || '';
            const shouldShow = compoNames.includes(searchTerm);
            compo.style.display = shouldShow ? 'flex' : 'none';
        });
    }

    function switchView(viewType) {
        // Ocultar todas las vistas
        document.querySelectorAll('.view-content').forEach(view => {
            view.classList.remove('active');
        });
        
        // Mostrar la vista seleccionada
        const selectedView = document.getElementById(`${viewType}-view`);
        if (selectedView) {
            selectedView.classList.add('active');
        }

        // Actualizar botones de navegación
        document.querySelectorAll('.tier-nav-item').forEach(item => {
            item.classList.remove('active');
        });
        
        const activeNavItem = document.querySelector(`[data-view="${viewType}"]`);
        if (activeNavItem) {
            activeNavItem.classList.add('active');
        }
    }

    // Inicializar cuando el DOM esté listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeElements);
    } else {
        initializeElements();
    }

    // Asegurarse de que los event listeners se mantengan después de la navegación
    document.addEventListener('astro:page-load', initializeElements);
</script> 