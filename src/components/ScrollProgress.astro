---
const { className = "" } = Astro.props;
---

<div id="scroll-progress" class={`fixed inset-x-0 top-0 z-[1000] h-1 origin-left ${className}`}>
</div>

<button id="scroll-to-top" class="scroll-to-top hidden" aria-label="Volver arriba">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path fill="currentColor" d="M12 4l-8 8h5v8h6v-8h5z"/>
    </svg>
</button>

<style>
    #scroll-progress {
        transform-origin: 0%;
        background: linear-gradient(90deg, #f54245 0%, #fd856f 100%);
        transform: scaleX(0);
        transition: transform 0.2s ease;
        height: 10px;
        box-shadow: 0 0 15px rgba(245, 66, 69, 0.6);
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        z-index: 9999;
    }

    .scroll-to-top {
        position: fixed;
        bottom: 30px;
        right: 30px;
        width: 45px;
        height: 45px;
        background: #f54245;
        border: none;
        border-radius: 8px;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease;
        z-index: 9998;
        box-shadow: 0 4px 12px rgba(245, 66, 69, 0.3);
    }

    .scroll-to-top:hover {
        background: #fd856f;
        transform: translateY(0) scale(1.05);
    }

    .scroll-to-top.visible {
        opacity: 1;
        transform: translateY(0);
    }

    .scroll-to-top svg {
        width: 22px;
        height: 22px;
    }
</style>

<script>
    const scrollProgress = document.getElementById("scroll-progress");
    const scrollButton = document.getElementById("scroll-to-top");

    const calculateScrollProgress = () => {
        const windowHeight = window.innerHeight;
        const documentHeight = document.documentElement.scrollHeight - windowHeight;
        const scrollTop = window.scrollY;
        const progress = Math.min(scrollTop / documentHeight, 1);
        
        // Actualizar barra de progreso
        if (scrollProgress) {
            requestAnimationFrame(() => {
                scrollProgress.style.transform = `scaleX(${progress})`;
            });
        }

        // Mostrar/ocultar botón de scroll
        if (scrollButton) {
            if (scrollTop > windowHeight / 2) {
                scrollButton.classList.add('visible');
            } else {
                scrollButton.classList.remove('visible');
            }
        }
    };

    // Función para scroll to top
    const scrollToTop = () => {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    };

    window.addEventListener("scroll", calculateScrollProgress, { passive: true });
    window.addEventListener("resize", calculateScrollProgress, { passive: true });
    scrollButton?.addEventListener("click", scrollToTop);
    
    // Calcular progreso inicial
    calculateScrollProgress();
</script> 