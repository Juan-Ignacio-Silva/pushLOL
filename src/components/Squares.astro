---
const {
  direction = 'right',
  speed = 1,
  borderColor = '#999',
  squareSize = 40,
  hoverFillColor = '#222'
} = Astro.props;
---

<canvas id="squaresCanvas" class="squares-canvas"></canvas>

<style>
  .squares-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    border: none;
    display: block;
  }
</style>

<script define:vars={{ direction, speed, borderColor, squareSize, hoverFillColor }}>
  const canvas = document.getElementById('squaresCanvas');
  const ctx = canvas.getContext('2d');
  
  let requestRef;
  let numSquaresX;
  let numSquaresY;
  let gridOffset = { x: 0, y: 0 };
  let hoveredSquare = null;

  const resizeCanvas = () => {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    numSquaresX = Math.ceil(canvas.width / squareSize) + 1;
    numSquaresY = Math.ceil(canvas.height / squareSize) + 1;
  };

  const drawGrid = () => {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const startX = Math.floor(gridOffset.x / squareSize) * squareSize;
    const startY = Math.floor(gridOffset.y / squareSize) * squareSize;

    for (let x = startX; x < canvas.width + squareSize; x += squareSize) {
      for (let y = startY; y < canvas.height + squareSize; y += squareSize) {
        const squareX = x - (gridOffset.x % squareSize);
        const squareY = y - (gridOffset.y % squareSize);

        if (
          hoveredSquare &&
          Math.floor((x - startX) / squareSize) === hoveredSquare.x &&
          Math.floor((y - startY) / squareSize) === hoveredSquare.y
        ) {
          ctx.fillStyle = hoverFillColor;
          ctx.fillRect(squareX, squareY, squareSize, squareSize);
        }

        ctx.strokeStyle = borderColor;
        ctx.strokeRect(squareX, squareY, squareSize, squareSize);
      }
    }

    const gradient = ctx.createRadialGradient(
      canvas.width / 2,
      canvas.height / 2,
      0,
      canvas.width / 2,
      canvas.height / 2,
      Math.sqrt(Math.pow(canvas.width, 2) + Math.pow(canvas.height, 2)) / 2
    );
    gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
    gradient.addColorStop(1, '#060606');

    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  };

  const updateAnimation = () => {
    const effectiveSpeed = Math.max(speed, 0.1);
    switch (direction) {
      case 'right':
        gridOffset.x = (gridOffset.x - effectiveSpeed + squareSize) % squareSize;
        break;
      case 'left':
        gridOffset.x = (gridOffset.x + effectiveSpeed + squareSize) % squareSize;
        break;
      case 'up':
        gridOffset.y = (gridOffset.y + effectiveSpeed + squareSize) % squareSize;
        break;
      case 'down':
        gridOffset.y = (gridOffset.y - effectiveSpeed + squareSize) % squareSize;
        break;
      case 'diagonal':
        gridOffset.x = (gridOffset.x - effectiveSpeed + squareSize) % squareSize;
        gridOffset.y = (gridOffset.y - effectiveSpeed + squareSize) % squareSize;
        break;
    }

    drawGrid();
    requestRef = requestAnimationFrame(updateAnimation);
  };

  const handleMouseMove = (event) => {
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;

    const startX = Math.floor(gridOffset.x / squareSize) * squareSize;
    const startY = Math.floor(gridOffset.y / squareSize) * squareSize;

    const hoveredSquareX = Math.floor((mouseX + gridOffset.x - startX) / squareSize);
    const hoveredSquareY = Math.floor((mouseY + gridOffset.y - startY) / squareSize);

    hoveredSquare = { x: hoveredSquareX, y: hoveredSquareY };
  };

  const handleMouseLeave = () => {
    hoveredSquare = null;
  };

  window.addEventListener('resize', resizeCanvas);
  canvas.addEventListener('mousemove', handleMouseMove);
  canvas.addEventListener('mouseleave', handleMouseLeave);

  resizeCanvas();
  requestRef = requestAnimationFrame(updateAnimation);
</script> 